name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        go-version: ['1.24.x', '1.25.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests with coverage
      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Run race detector tests
      run: go test -v -race ./...

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.25.x'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.5
        args: --timeout=5m

  license:
    name: License Headers
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check SPDX license headers
      run: |
        chmod +x ./scripts/check-headers.sh
        ./scripts/check-headers.sh

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'

    - name: Run benchmarks on PR branch
      run: |
        go test -run='^$' -bench=. -benchmem -count=5 ./... > new.txt

    - name: Checkout base branch
      run: |
        git checkout ${{ github.base_ref }}

    - name: Run benchmarks on base branch
      run: |
        go test -run='^$' -bench=. -benchmem -count=5 ./... > old.txt

    - name: Install benchstat
      run: go install golang.org/x/perf/cmd/benchstat@latest

    - name: Compare benchmarks
      run: |
        benchstat old.txt new.txt > comparison.txt
        cat comparison.txt

    - name: Comment PR with benchmark results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const comparison = fs.readFileSync('comparison.txt', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Benchmark Comparison\n\n\`\`\`\n${comparison}\n\`\`\``
          });
